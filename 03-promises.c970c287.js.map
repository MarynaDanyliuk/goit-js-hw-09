{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,KAAMC,SAASC,cAAc,QAC7BC,OAAQF,SAASC,cAAc,yBAC/BE,WAAYH,SAASC,cAAc,uBACnCG,UAAWJ,SAASC,cAAc,sBAClCI,YAAaL,SAASC,cAAc,0BAGjCF,KAAKO,iBAAiB,UAiB3B,SAAsBC,GACpBA,EAAMC,iBACW,IAAIC,SAASF,EAAMG,eAApC,MACMC,EAAO,CACXC,MAAOC,OAAOC,EAAaF,MAAMG,OACjCC,KAAMH,OAAOC,EAAaE,KAAKD,OAC/BE,OAAQJ,OAAOC,EAAaG,OAAOF,QAErCG,QAAQC,IAAIR,GACZ,MACES,UAAUR,MAAEA,EAAKI,KAAEA,EAAIC,OAAEA,IACvBV,EAAMc,OACV,IAAIC,EAAaT,OAAOD,EAAMG,OAC1BQ,EAAWV,OAAOG,EAAKD,OAE3B,IAAK,IAAIS,EAAI,EAAGA,EAAIP,EAAOF,MAAOS,GAAK,EAAG,CAIxCC,EAHeD,EAAI,EACHF,EAAaE,EAAID,GAG9BG,MAAK,EAACC,SAAEA,EAAQC,UAAEA,MACjBC,EAAAhC,GAASiC,OAAOC,QACd,uBAAqBJ,QAAiBC,MAAc,IAGvDI,OAAM,EAACL,SAAEA,EAAQC,UAAEA,MAClBC,EAAAhC,GAASiC,OAAOG,QACd,sBAAoBN,QAAiBC,MAAc,G,CAK3Dd,EAAaoB,O,IA/Cf,MAAMpB,EAAed,SAASC,cAAc,SAE5C,SAASwB,EAAcE,EAAUf,GAC/B,OAAO,IAAIuB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,uBAAqBT,QAAiBf,QAE5CyB,EAAK,sBAAoBV,QAAiBf,OAAW,GAExDA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector(`form`),\n  button: document.querySelector(`button[type=\"submit\"]`),\n  inputDelay: document.querySelector(`input[name=\"delay\"]`),\n  inputStep: document.querySelector(`input[name=\"step\"]`),\n  inputAmount: document.querySelector(`input[name=\"amount\"]`),\n};\n\nrefs.form.addEventListener(`submit`, onFormSubmit);\n\nconst formElements = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay} ms`);\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const formData = new FormData(event.currentTarget);\n  const data = {\n    delay: Number(formElements.delay.value),\n    step: Number(formElements.step.value),\n    amount: Number(formElements.amount.value),\n  };\n  console.log(data);\n  const {\n    elements: { delay, step, amount },\n  } = event.target;\n  let delayStart = Number(delay.value);\n  let nextStep = Number(step.value);\n\n  for (let i = 0; i < amount.value; i += 1) {\n    let position = i + 1;\n    let nextDelay = delayStart + i * nextStep;\n\n    createPromise(position, nextDelay)\n      .then(({ position, nextDelay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${nextDelay}ms`\n        );\n      })\n      .catch(({ position, nextDelay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${nextDelay}ms`\n        );\n      });\n  }\n\n  formElements.reset();\n}\n\n// ________\n\n// let delay = formElements.delay.value;\n// let step = formElements.step.value;\n// let amount = formElements.amount.value;\n// let position = 0;\n\n// const formData = {\n//   delay: delay,\n//   step: step,\n//   amount: amount,\n// };\n// console.log(formData);\n\n// const promises = [];\n\n// function createPromises({ delay, step, amount }) {\n//   // delay[0] = delay;\n//   for (let position = 0; position <= amount; position += 1) {\n//     delay[0] = delay;\n//     delay[position] += step;\n\n//     const promise = function createPromise(position, delay) {\n//       const shouldResolve = Math.random() > 0.3;\n//       return new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//           if (shouldResolve) {\n//             resolve(`✅ Fulfilled promise ${position} in ${delay} ms`);\n//           } else {\n//             reject(`❌ Rejected promise ${position} in ${delay} ms`);\n//           }\n//         }, delay);\n//       });\n//     };\n\n//     // return promises.push(promise);\n//   }\n//   // return promises;\n// }\n\n// console.log(promises);\n// console.log(createPromises({ delay, step, amount }));\n\n// createPromise({ position, delay })\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n//   });\n\n// const promises = promisesArray.map(promise => createPromise(position, delay));\n\n// function createPromises({ delay, step, amount }) {\n//   // let promisesArray = [];\n//   // delay[0] = 0;\n//   // for (let i = 0; i < amount; i += 1) {\n//   //   console.log((delay[i] += step));\n//   //   console.log(promise[i]);\n//   //   promisesArray.push(promise[i]);\n//   // }\n//   // return;\n// }\n\n// console.log(promisesArray);\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay} ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay} ms`);\n//       }\n//     }, delay);\n//     // return promise;\n//   });\n// }\n\n// createPromise(1, 1000)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n//   });\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve('Success! Value passed to resolve function');\n//       } else {\n//         reject('Error! Error passed to reject function');\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\n\n// function onSuccess(result) {\n//   console.log(result);\n// }\n// function onError(result) {\n//   console.log(result);\n// }\n\n// console.log(createPromise(5, refs.inputDelay.value));\n\n// const promise = new Promise((resolve, reject) => {\n//   const delay = refs.inputDelay.value;\n//   const step = refs.inputStep.value;\n//   const position = 5;\n//   setTimeout(() => {}, delay);\n//   function createPromise(position, delay) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }\n//   console.log(createPromise(position, delay));\n// });\n\n// promise\n//   .then(\n//     result => {\n//       console.log(`${result}`);\n//     }\n//     // error => {\n//     //   console.log(`${error}`);\n//     // }\n//   )\n//   .catch(console.log(`${error}`));\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Promise.then(result => {\n//   console.log(result);\n// });\n\n// console.log(createPromise(position, delay));\n\n// ___________________________________________\n// promise.then(\n//   // onResolve will run third or not at all\n//   result => {\n//     console.log('onResolve call inside promise.then()');\n//     console.log(result); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log('onReject call inside promise.then()');\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// ________________________\n"],"names":["$eWCmQ","parcelRequire","form","document","querySelector","button","inputDelay","inputStep","inputAmount","addEventListener","event","preventDefault","FormData","currentTarget","data","delay","Number","$47d4ff9957288465$var$formElements","value","step","amount","console","log","elements","target","delayStart","nextStep","i","$47d4ff9957288465$var$createPromise","then","position","nextDelay","$parcel$interopDefault","Notify","success","catch","failure","reset","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.c970c287.js.map"}